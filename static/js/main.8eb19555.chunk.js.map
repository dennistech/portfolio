{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleMenu","setState","showMenu","state","react_default","a","createElement","className","concat","onClick","href","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAyEeA,2BApEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,WAAa,WACXP,EAAKQ,SAAS,CAAEC,UAAWT,EAAKU,MAAMD,YANtCT,EAAKU,MAAQ,CACXD,UAAU,GAJKT,wEAajB,OACEW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAS,YAAAC,OAAcZ,KAAKO,MAAMD,SAAW,QAAU,IAAOO,QAASb,KAAKI,YAC/EI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAGjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,QAAAC,OAAUZ,KAAKO,MAAMD,SAAW,OAAS,KACrDE,EAAAC,EAAAC,cAAA,MAAIC,UAAS,YAAAC,OAAcZ,KAAKO,MAAMD,SAAW,OAAS,KACxDE,EAAAC,EAAAC,cAAA,MAAIC,UAAS,oBAAAC,OAAsBZ,KAAKO,MAAMD,SAAW,OAAS,KAChEE,EAAAC,EAAAC,cAAA,KAAGI,KAAK,IAAIH,UAAU,YAAtB,SAIFH,EAAAC,EAAAC,cAAA,MAAIC,UAAS,YAAAC,OAAcZ,KAAKO,MAAMD,SAAW,OAAS,KACxDE,EAAAC,EAAAC,cAAA,KAAGI,KAAK,SAASH,UAAU,YAA3B,aAIFH,EAAAC,EAAAC,cAAA,MAAIC,UAAS,YAAAC,OAAcZ,KAAKO,MAAMD,SAAW,OAAS,KACxDE,EAAAC,EAAAC,cAAA,KAAGI,KAAK,YAAYH,UAAU,YAA9B,aAIFH,EAAAC,EAAAC,cAAA,MAAIC,UAAS,YAAAC,OAAcZ,KAAKO,MAAMD,SAAW,OAAS,KACxDE,EAAAC,EAAAC,cAAA,KAAGI,KAAK,WAAWH,UAAU,YAA7B,eAORH,EAAAC,EAAAC,cAAA,QAAMK,GAAG,QACPP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,UACSH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,QAETH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,uDAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,KAAGI,KAAK,MACNN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BAEfH,EAAAC,EAAAC,cAAA,KAAGI,KAAK,MACNN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mCA5DTK,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8eb19555.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport './css/main.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showMenu: false,\n    };\n  }\n\n  toggleMenu = () => {\n    this.setState({ showMenu: !this.state.showMenu });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className={`menu-btn ${this.state.showMenu ? 'close' : '' }`} onClick={this.toggleMenu}>\n            <div className=\"btn-line\" />\n            <div className=\"btn-line\" />\n            <div className=\"btn-line\" />\n          </div>\n\n          <nav className={`menu ${this.state.showMenu ? 'show' : '' }`}>\n            <ul className={`menu-nav ${this.state.showMenu ? 'show' : '' }`}>\n              <li className={`nav-item current ${this.state.showMenu ? 'show' : '' }`}>\n                <a href=\"/\" className=\"nav-link\">\n                  Home\n                </a>\n              </li>\n              <li className={`nav-item ${this.state.showMenu ? 'show' : '' }`}>\n                <a href=\"/about\" className=\"nav-link\">\n                  About Me\n                </a>\n              </li>\n              <li className={`nav-item ${this.state.showMenu ? 'show' : '' }`}>\n                <a href=\"/projects\" className=\"nav-link\">\n                  Projects\n                </a>\n              </li>\n              <li className={`nav-item ${this.state.showMenu ? 'show' : '' }`}>\n                <a href=\"/contact\" className=\"nav-link\">\n                  Contact\n                </a>\n              </li>\n            </ul>\n          </nav>\n        </header>\n        <main id=\"home\">\n          <h1 className=\"lg-heading\">\n            Dennis <span className=\"text-secondary\">Mok</span>\n          </h1>\n          <h2 className=\"sm-heading\">\n            Front End Software Engineer, Developer & Programmer\n          </h2>\n          <div className=\"icons\">\n            <a href=\"#!\">\n              <i className=\"fab fa-linkedin fa-2x\" />\n            </a>\n            <a href=\"#!\">\n              <i className=\"fab fa-github fa-2x\" />\n            </a>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}